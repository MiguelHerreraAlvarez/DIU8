import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class NewJFrame extends javax.swing.JFrame {
    private final String messageAbout = "Compresor de directorios permite generar"
            + " un archivo .zip a partir de una carpeta,\ncon el nombre de la "
            + "carpeta que se desea comprimir como nombre de fichero.\nCreadores: "
            + "Víctor Herrera Delgado y Miguel Herrera Álvarez.\nVersión: 1.0\n"
            + "Versión de Java: 1.8.0_181";
    private final JFileChooser fc = new JFileChooser();
    private Worker1 worker;
    private File fichero;
    private File destino;
    private boolean inProgress = false;
    
    public NewJFrame() {
        initComponents();
        controller();
        cancelButton.setEnabled(false);
        fichero = null;
        destino = null;

        this.setDefaultCloseOperation(javax.swing.WindowConstants.
                DO_NOTHING_ON_CLOSE);
        
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                int res =JOptionPane.showConfirmDialog(null,
                        "¿Está seguro de que quiere salir de la aplicación?",
                        "Salir",JOptionPane.YES_NO_OPTION);
                if(res==JOptionPane.YES_OPTION){
                    System.exit(0);
                }
            }
        });
        
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        startButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        try {
            destinationShow = new fileShow();
        } catch (java.io.IOException e1) {
            e1.printStackTrace();
        }
        try {
            tozipShow = new fileShow();
        } catch (java.io.IOException e1) {
            e1.printStackTrace();
        }
        originLabel = new javax.swing.JLabel();
        destinationLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileBarMenu = new javax.swing.JMenu();
        tozipSelector = new javax.swing.JMenuItem();
        destinationSelector = new javax.swing.JMenuItem();
        exitOption = new javax.swing.JMenuItem();
        helpBarMenu = new javax.swing.JMenu();
        AboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Estado:");

        jLabel2.setText("Conversión ");

        jProgressBar1.setForeground(new java.awt.Color(0, 120, 216));

        startButton.setText("Empezar");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        statusLabel.setText("No empezado");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(startButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelButton))
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(297, 297, 297))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(statusLabel))
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(cancelButton))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        destinationShow.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        destinationShow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                destinationShowMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout destinationShowLayout = new javax.swing.GroupLayout(destinationShow);
        destinationShow.setLayout(destinationShowLayout);
        destinationShowLayout.setHorizontalGroup(
            destinationShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        destinationShowLayout.setVerticalGroup(
            destinationShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tozipShow.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tozipShow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tozipShowMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout tozipShowLayout = new javax.swing.GroupLayout(tozipShow);
        tozipShow.setLayout(tozipShowLayout);
        tozipShowLayout.setHorizontalGroup(
            tozipShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
        );
        tozipShowLayout.setVerticalGroup(
            tozipShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );

        originLabel.setText("Carpeta origen");

        destinationLabel.setText("Carpeta destino");

        fileBarMenu.setText("Archivo");

        tozipSelector.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        tozipSelector.setText("Elegir carpeta a comprimir");
        tozipSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tozipSelectorActionPerformed(evt);
            }
        });
        fileBarMenu.add(tozipSelector);

        destinationSelector.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        destinationSelector.setText("Elegir carpeta destino");
        destinationSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationSelectorActionPerformed(evt);
            }
        });
        fileBarMenu.add(destinationSelector);

        exitOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        exitOption.setText("Salir");
        exitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitOptionActionPerformed(evt);
            }
        });
        fileBarMenu.add(exitOption);

        jMenuBar1.add(fileBarMenu);

        helpBarMenu.setText("Ayuda");

        AboutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        AboutMenu.setText("Acerca de");
        AboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuActionPerformed(evt);
            }
        });
        helpBarMenu.add(AboutMenu);

        jMenuBar1.add(helpBarMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(originLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tozipShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(destinationShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(destinationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(destinationShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tozipShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(originLabel)
                    .addComponent(destinationLabel))
                .addGap(19, 19, 19)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void selectFolder(){
        if(inProgress){
            JOptionPane.showMessageDialog(null,
                    "No se pueden seleccionar ficheros durante la ejecución","Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        jProgressBar1.setValue(0);
        statusLabel.setText("No empezado");
        statusLabel.setForeground(Color.BLACK);
        
        while(true){
            fichero = selectFile(false);
            if(fichero == null || destino == null ||  (destino != null && !destino.getAbsolutePath().contains(fichero.getAbsolutePath())) ) break;
            else if(destino != null) {
                if(fichero != null) tozipShow.setImage(2);
                JOptionPane.showMessageDialog(null,
                    "La carpeta destino no puede ser o estar dentro de la carpeta a comprimir","Error",
                    JOptionPane.ERROR_MESSAGE);
                fichero = null;
            }
        }
        
        if(fichero != null){
            tozipShow.setImage(1);
            originLabel.setText(fichero.getName());
            originLabel.setToolTipText(fichero.getAbsolutePath());
        } else {
            originLabel.setText("Carpeta origen");
            originLabel.setToolTipText(null);
            tozipShow.setImage(0);
        }
        
        controller();
    }
    
    private void selectDestination(){
        if(inProgress){
            JOptionPane.showMessageDialog(null,
                    "No se pueden seleccionar ficheros durante la ejecución","Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        jProgressBar1.setValue(0);
        statusLabel.setText("No empezado");
        statusLabel.setForeground(Color.BLACK);
        
        while(true){
            destino = selectFile(false);
            if(destino == null || fichero == null || (fichero != null && !destino.getAbsolutePath().contains(fichero.getAbsolutePath())) ) break;
            else if(fichero != null) {                
                if(destino != null) destinationShow.setImage(2);
                JOptionPane.showMessageDialog(null,
                        "La carpeta destino no puede ser o estar dentro de la carpeta a comprimir","Error",
                        JOptionPane.ERROR_MESSAGE);
                destino = null;
            }
        }
        
        if(destino != null){
            destinationShow.setImage(1);
            destinationLabel.setText(destino.getAbsolutePath());
            destinationLabel.setToolTipText(destino.getAbsolutePath());
        } else {
            destinationLabel.setText("Carpeta destino");
            destinationLabel.setToolTipText(null);
            destinationShow.setImage(0);
        }
        
        controller();
    }
    
    private List<String> getFolderContent(File fichero){
        List<String> files = new ArrayList<>();
        
        if (!fichero.isDirectory()) return null;
        
        for (File temp : fichero.listFiles()) {
            if (temp.isDirectory()) {
			files.addAll(getFolderContent(temp));
            } else{
                files.add(temp.getAbsolutePath());
            }	
        }
        
        return files;
    }
    private File selectFile(boolean newOne){
        File ficheroTemp = null;

        while(true){
            int res = fc.showOpenDialog(null);
            if (res == JFileChooser.APPROVE_OPTION) {
                ficheroTemp = fc.getSelectedFile();
                if (!ficheroTemp.exists() && !newOne){
                    JOptionPane.showMessageDialog(null,
                        "La carpeta seleccionada no existe","Error",
                        JOptionPane.ERROR_MESSAGE);
                }else break;
            }else return null;
        }
        
        return ficheroTemp;
    }
    
    private boolean controller(){
        if(fichero == null || destino == null || destino.getAbsolutePath().contains(
                fichero.getAbsolutePath())){
            startButton.setEnabled(false);
            return false;
        }
        
        startButton.setEnabled(true);
        return true;
    }
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (!controller()) return;
        if(new File(destino.getAbsolutePath(),fichero.getName()+".zip").exists()){
            JOptionPane.showMessageDialog(null, "Ya existe un fichero con ese nombre en la carpeta de destino",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
            
        inProgress = true;
        List<String> files = getFolderContent(fichero);
        worker = new Worker1();
        worker.setFiles(files,destino.getAbsolutePath().lastIndexOf("\\")+1);
        worker.setDestination(destino.getAbsolutePath()+ "\\" + fichero.getName()+ ".zip");
        cancelButton.setEnabled(true);
        worker.addPropertyChangeListener(
            new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if (worker.isDone() && !worker.isCancelled()){
                        jProgressBar1.setValue(100);
                        statusLabel.setText("Terminado");
                        statusLabel.setForeground(Color.GREEN);
                        cancelButton.setEnabled(false);
                        startButton.setEnabled(true);
                        inProgress = false;
                        destinationShow.setImage(2);
                        destinationLabel.setText("Carpeta destino");
                        destinationLabel.setToolTipText(null);
                        destino = null;
                        controller();
                    }
                    else if("progress".equals(evt.getPropertyName())){
                            jProgressBar1.setValue((Integer)evt.getNewValue());
                    }else if(worker.isCancelled()){
                        cancelButton.setEnabled(false);
                        inProgress = false;
                        startButton.setEnabled(true);
                    }
                }
            }
        );
        
        statusLabel.setText("En progreso");
        statusLabel.setForeground(Color.YELLOW);
        startButton.setEnabled(false);
        worker.execute();
    }//GEN-LAST:event_startButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        try {
            worker.cancel();
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(destino == null) return;
        File destination = new File(destino.getAbsolutePath() + "\\" + fichero.getName()+ ".zip");
        if (!destination.exists()) return;
        
        while(!destination.delete()) 
        { 
            System.err.println("Failed to delete the file"); 
        } 
        
        cancelButton.setEnabled(false);
        statusLabel.setText("Cancelado");
        statusLabel.setForeground(Color.RED);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void exitOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitOptionActionPerformed
        int res =JOptionPane.showConfirmDialog(null,
                "¿Está seguro de que quiere salir de la aplicación?","Salir",
                JOptionPane.YES_NO_OPTION);
        if(res == JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_exitOptionActionPerformed

    private void tozipSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tozipSelectorActionPerformed
        selectFolder();
    }//GEN-LAST:event_tozipSelectorActionPerformed

    private void destinationSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationSelectorActionPerformed
        selectDestination();
    }//GEN-LAST:event_destinationSelectorActionPerformed

    private void tozipShowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tozipShowMouseClicked
        selectFolder();
    }//GEN-LAST:event_tozipShowMouseClicked

    private void destinationShowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_destinationShowMouseClicked
        selectDestination();
    }//GEN-LAST:event_destinationShowMouseClicked

    private void AboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuActionPerformed
        JOptionPane.showMessageDialog(null,messageAbout,"Acerca de",
                JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_AboutMenuActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                NewJFrame frame = new NewJFrame();
                frame.setLocationRelativeTo(null);
                frame.setTitle("Compresor de directorios");
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenu;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JMenuItem destinationSelector;
    private fileShow destinationShow;
    private javax.swing.JMenuItem exitOption;
    private javax.swing.JMenu fileBarMenu;
    private javax.swing.JMenu helpBarMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel originLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JMenuItem tozipSelector;
    private fileShow tozipShow;
    // End of variables declaration//GEN-END:variables

}